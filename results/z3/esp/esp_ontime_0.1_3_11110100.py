from z3 import *
import math
import numpy as np

s = Solver()
set_option(rational_to_decimal=True)

x1_0 = Real('x1_0')
z1_0 = Real('z1_0')
xabs1_0 = Real('xabs1_0')
x2_0 = Real('x2_0')
z2_0 = Real('z2_0')
xabs2_0 = Real('xabs2_0')
y1_0 = Real('y1_0')
r1_0 = Real('r1_0')
rabs1_0 = Real('rabs1_0')
u1_0 = Real('u1_0')
r_0 = Real('r_0')

x1_1 = Real('x1_1')
z1_1 = Real('z1_1')
xabs1_1 = Real('xabs1_1')
x2_1 = Real('x2_1')
z2_1 = Real('z2_1')
xabs2_1 = Real('xabs2_1')
y1_1 = Real('y1_1')
r1_1 = Real('r1_1')
rabs1_1 = Real('rabs1_1')
u1_1 = Real('u1_1')
r_1 = Real('r_1')

x1_2 = Real('x1_2')
z1_2 = Real('z1_2')
xabs1_2 = Real('xabs1_2')
x2_2 = Real('x2_2')
z2_2 = Real('z2_2')
xabs2_2 = Real('xabs2_2')
y1_2 = Real('y1_2')
r1_2 = Real('r1_2')
rabs1_2 = Real('rabs1_2')
u1_2 = Real('u1_2')
r_2 = Real('r_2')

x1_3 = Real('x1_3')
z1_3 = Real('z1_3')
xabs1_3 = Real('xabs1_3')
x2_3 = Real('x2_3')
z2_3 = Real('z2_3')
xabs2_3 = Real('xabs2_3')
y1_3 = Real('y1_3')
r1_3 = Real('r1_3')
rabs1_3 = Real('rabs1_3')
u1_3 = Real('u1_3')
r_3 = Real('r_3')

s.add(Or(And(x1_0 < 1,x1_0 > 0.1),And(x1_0 > -1,x1_0 < -0.1)))
s.add(xabs1_0 == If(x1_0<0,(-1)*x1_0,x1_0))
s.add(Or(And(x2_0 < 2,x2_0 > 0.2),And(x2_0 > -2,x2_0 < -0.2)))
s.add(xabs2_0 == If(x2_0<0,(-1)*x2_0,x2_0))
s.add(y1_0 == 0)
s.add(u1_0 == 0)

# pattern = 1
s.add(r1_0 == y1_0 - (0*z1_0) - (1*z2_0) - (0*u1_0))
s.add(rabs1_0 == If(r1_0<0,(-1)*r1_0,r1_0))
s.add(r_0 ==rabs1_0 )
s.add(r_0<0.003)
s.add(z1_1 ==  (0.445*z1_0) + (-0.0458*z2_0) + (0.055*u1_0) + (-0.039*r1_0) )
s.add(z2_1 ==  (1.2939*z1_0) + (0.4402*z2_0) + (4.5607*u1_0) + (0.4339*r1_0) )
s.add(x1_1 ==  (0.445*x1_0) + (-0.0458*x2_0) + (0.055*u1_0) )
s.add(x2_1 ==  (1.2939*x1_0) + (0.4402*x2_0) + (4.5607*u1_0) )
s.add(xabs1_1 == If(x1_1<0,(-1)*x1_1,x1_1))
s.add(xabs2_1 == If(x2_1<0,(-1)*x2_1,x2_1))
s.add(u1_1 ==  - (-0.0987*z1_1) - (0.142*z2_1))
s.add(y1_1 ==  + (0*x1_1) + (1*x2_1) + (0*u1_1))
# pattern = 1
s.add(r1_1 == y1_1 - (0*z1_1) - (1*z2_1) - (0*u1_1))
s.add(rabs1_1 == If(r1_1<0,(-1)*r1_1,r1_1))
s.add(r_1 ==rabs1_1 )
s.add(r_1<0.003)
s.add(z1_2 ==  (0.445*z1_1) + (-0.0458*z2_1) + (0.055*u1_1) + (-0.039*r1_1) )
s.add(z2_2 ==  (1.2939*z1_1) + (0.4402*z2_1) + (4.5607*u1_1) + (0.4339*r1_1) )
s.add(x1_2 ==  (0.445*x1_1) + (-0.0458*x2_1) + (0.055*u1_1) )
s.add(x2_2 ==  (1.2939*x1_1) + (0.4402*x2_1) + (4.5607*u1_1) )
s.add(xabs1_2 == If(x1_2<0,(-1)*x1_2,x1_2))
s.add(xabs2_2 == If(x2_2<0,(-1)*x2_2,x2_2))
s.add(u1_2 ==  - (-0.0987*z1_2) - (0.142*z2_2))
s.add(y1_2 ==  + (0*x1_2) + (1*x2_2) + (0*u1_2))
# pattern = 1
s.add(r1_2 == y1_2 - (0*z1_2) - (1*z2_2) - (0*u1_2))
s.add(rabs1_2 == If(r1_2<0,(-1)*r1_2,r1_2))
s.add(r_2 ==rabs1_2 )
s.add(r_2<0.003)
s.add(z1_3 ==  (0.445*z1_2) + (-0.0458*z2_2) + (0.055*u1_2) + (-0.039*r1_2) )
s.add(z2_3 ==  (1.2939*z1_2) + (0.4402*z2_2) + (4.5607*u1_2) + (0.4339*r1_2) )
s.add(x1_3 ==  (0.445*x1_2) + (-0.0458*x2_2) + (0.055*u1_2) )
s.add(x2_3 ==  (1.2939*x1_2) + (0.4402*x2_2) + (4.5607*u1_2) )
s.add(xabs1_3 == If(x1_3<0,(-1)*x1_3,x1_3))
s.add(xabs2_3 == If(x2_3<0,(-1)*x2_3,x2_3))
s.add(u1_3 ==  - (-0.0987*z1_3) - (0.142*z2_3))
s.add(y1_3 ==  + (0*x1_3) + (1*x2_3) + (0*u1_3))
s.add(Or((xabs1_3>0.1),(xabs2_3>0.2)))

if s.check() != sat:
	print(s.check())
	isSat = 0
else:
	print(s.check())
	isSat = 1
	m = s.model()
	for d in m.decls():
		print ("%s = %s" % (d.name(), m[d]))
if isSat==0:
	f0 = open("../results/z3/esp/esp_ontime.z3result", "w+")
	f0.write("0")
	f0.close()
