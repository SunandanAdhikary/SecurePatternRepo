from z3 import *
import numpy as np

s = Solver()
set_option(rational_to_decimal=True)
set_option(precision=4)
attack1 = np.zeros(7, dtype=float)
attack2 = np.zeros(7, dtype=float)
x1_abs = np.zeros(7, dtype=float)
x1 = np.zeros(7, dtype=float)
z1 = np.zeros(7, dtype=float)
x2_abs = np.zeros(7, dtype=float)
x2 = np.zeros(7, dtype=float)
z2 = np.zeros(7, dtype=float)
y1 = np.zeros(7, dtype=float)
attackOnY1 = np.zeros(7, dtype=float)
r1 = np.zeros(7, dtype=float)
y2 = np.zeros(7, dtype=float)
attackOnY2 = np.zeros(7, dtype=float)
r2 = np.zeros(7, dtype=float)
u1 = np.zeros(7, dtype=float)
attackOnU1 = np.zeros(7, dtype=float)
r = np.zeros(7, dtype=float)
y1_0 = Real('y1_0')
r1_0 = Real('r1_0')
rabs1_0 = Real('rabs1_0')
y2_0 = Real('y2_0')
r2_0 = Real('r2_0')
rabs2_0 = Real('rabs2_0')
x1_0 = Real('x1_0')
z1_0 = Real('z1_0')
x1_abs_0 = Real('x1_abs_0')
x2_0 = Real('x2_0')
z2_0 = Real('z2_0')
x2_abs_0 = Real('x2_abs_0')
u1_0 = Real('u1_0')
u1_attacked_0 = Real('u1_attacked_0')
r_0 = Real('r_0')
y1_1 = Real('y1_1')
r1_1 = Real('r1_1')
rabs1_1 = Real('rabs1_1')
y2_1 = Real('y2_1')
r2_1 = Real('r2_1')
rabs2_1 = Real('rabs2_1')
x1_1 = Real('x1_1')
z1_1 = Real('z1_1')
x1_abs_1 = Real('x1_abs_1')
x2_1 = Real('x2_1')
z2_1 = Real('z2_1')
x2_abs_1 = Real('x2_abs_1')
u1_1 = Real('u1_1')
u1_attacked_1 = Real('u1_attacked_1')
r_1 = Real('r_1')
y1_2 = Real('y1_2')
r1_2 = Real('r1_2')
rabs1_2 = Real('rabs1_2')
y2_2 = Real('y2_2')
r2_2 = Real('r2_2')
rabs2_2 = Real('rabs2_2')
x1_2 = Real('x1_2')
z1_2 = Real('z1_2')
x1_abs_2 = Real('x1_abs_2')
x2_2 = Real('x2_2')
z2_2 = Real('z2_2')
x2_abs_2 = Real('x2_abs_2')
u1_2 = Real('u1_2')
u1_attacked_2 = Real('u1_attacked_2')
r_2 = Real('r_2')
y1_3 = Real('y1_3')
r1_3 = Real('r1_3')
rabs1_3 = Real('rabs1_3')
y2_3 = Real('y2_3')
r2_3 = Real('r2_3')
rabs2_3 = Real('rabs2_3')
x1_3 = Real('x1_3')
z1_3 = Real('z1_3')
x1_abs_3 = Real('x1_abs_3')
x2_3 = Real('x2_3')
z2_3 = Real('z2_3')
x2_abs_3 = Real('x2_abs_3')
u1_3 = Real('u1_3')
u1_attacked_3 = Real('u1_attacked_3')
r_3 = Real('r_3')
y1_4 = Real('y1_4')
r1_4 = Real('r1_4')
rabs1_4 = Real('rabs1_4')
y2_4 = Real('y2_4')
r2_4 = Real('r2_4')
rabs2_4 = Real('rabs2_4')
x1_4 = Real('x1_4')
z1_4 = Real('z1_4')
x1_abs_4 = Real('x1_abs_4')
x2_4 = Real('x2_4')
z2_4 = Real('z2_4')
x2_abs_4 = Real('x2_abs_4')
u1_4 = Real('u1_4')
u1_attacked_4 = Real('u1_attacked_4')
r_4 = Real('r_4')
y1_5 = Real('y1_5')
r1_5 = Real('r1_5')
rabs1_5 = Real('rabs1_5')
y2_5 = Real('y2_5')
r2_5 = Real('r2_5')
rabs2_5 = Real('rabs2_5')
x1_5 = Real('x1_5')
z1_5 = Real('z1_5')
x1_abs_5 = Real('x1_abs_5')
x2_5 = Real('x2_5')
z2_5 = Real('z2_5')
x2_abs_5 = Real('x2_abs_5')
u1_5 = Real('u1_5')
u1_attacked_5 = Real('u1_attacked_5')
r_5 = Real('r_5')
y1_6 = Real('y1_6')
r1_6 = Real('r1_6')
rabs1_6 = Real('rabs1_6')
y2_6 = Real('y2_6')
r2_6 = Real('r2_6')
rabs2_6 = Real('rabs2_6')
x1_6 = Real('x1_6')
z1_6 = Real('z1_6')
x1_abs_6 = Real('x1_abs_6')
x2_6 = Real('x2_6')
z2_6 = Real('z2_6')
x2_abs_6 = Real('x2_abs_6')
u1_6 = Real('u1_6')
u1_attacked_6 = Real('u1_attacked_6')
r_6 = Real('r_6')

s.add(u1_0 == 0)
s.add(x1_0 == 0)
s.add(z1_0 == 0)
s.add(x1_abs_0 == 0)
s.add(x2_0 == 0)
s.add(z2_0 == 0)
s.add(x2_abs_0 == 0)

s.add(u1_0 ==  - (0.0556*xhat1_0) - (0.3306*xhat2_0))
u1_attack_0 = Real('u1_attack_0')
s.add(u1_attacked_0 == u1_0+ (1.0*u1_attack_0))
y1_attack_0 = Real('y1_attack_0')
y2_attack_0 = Real('y2_attack_0')
s.add(y1_0 == (1.0*y1_attack_0) + (1*x1_0) + (0*x2_0) + (0*u1_0))
s.add(y2_0 == (0.0*y2_attack_0) + (0*x1_0) + (1*x2_0) + (0*u1_0))
s.add(r1_0 == y1_0 - (1*z1_0) - (0*z2_0) - (0*u1_attacked_0))
s.add(r2_0 == y2_0 - (0*z1_0) - (1*z2_0) - (0*u1_attacked_0))
s.add(rabs1_0 == If(r1_0<0,(-1)*r1_0,r1_0))
s.add(rabs2_0 == If(r2_0<0,(-1)*r2_0,r2_0))
s.add(r_0 ==rabs1_0 +rabs2_0 )
s.add(r_0<0.03)
s.add(z1_1 ==  (0.66*z1_0) + (0.53*z2_0) + (0.34*u1_0) + (0.36*r1[0]) + (0.27*r2[0]) )
s.add(z2_1 ==  (-0.53*z1_0) + (0.13*z2_0) + (0.53*u1_0) + (-0.31*r1[0]) + (0.08*r2[0]) )
s.add(x1_1 ==  (0.66*x1_0) + (0.53*x2_0) + (0.34*u1_attacked_0) )
s.add(x2_1 ==  (-0.53*x1_0) + (0.13*x2_0) + (0.53*u1_attacked_0) )
s.add(u1_1 ==  - (0.0556*xhat1_1) - (0.3306*xhat2_1))
s.add(u1_attacked_1 == u1_1)
s.add(y1_1 ==  + (1*x1_1) + (0*x2_1) + (0*u1_1))
s.add(y2_1 ==  + (0*x1_1) + (1*x2_1) + (0*u1_1))
s.add(r1_1 == y1_1 - (1*z1_1) - (0*z2_1) - (0*u1_attacked_1))
s.add(r2_1 == y2_1 - (0*z1_1) - (1*z2_1) - (0*u1_attacked_1))
s.add(rabs1_1 == If(r1_1<0,(-1)*r1_1,r1_1))
s.add(rabs2_1 == If(r2_1<0,(-1)*r2_1,r2_1))
s.add(r_1 ==rabs1_1 +rabs2_1 )
s.add(r_1<0.03)
s.add(z1_2 ==  (0.66*z1_1) + (0.53*z2_1) + (0.34*u1_1) + (0.36*r1[1]) + (0.27*r2[1]) )
s.add(z2_2 ==  (-0.53*z1_1) + (0.13*z2_1) + (0.53*u1_1) + (-0.31*r1[1]) + (0.08*r2[1]) )
s.add(x1_2 ==  (0.66*x1_1) + (0.53*x2_1) + (0.34*u1_attacked_1) )
s.add(x2_2 ==  (-0.53*x1_1) + (0.13*x2_1) + (0.53*u1_attacked_1) )
s.add(u1_2 ==  - (0.0556*xhat1_2) - (0.3306*xhat2_2))
s.add(u1_attacked_2 == u1_2)
s.add(y1_2 ==  + (1*x1_2) + (0*x2_2) + (0*u1_2))
s.add(y2_2 ==  + (0*x1_2) + (1*x2_2) + (0*u1_2))
s.add(r1_2 == y1_2 - (1*z1_2) - (0*z2_2) - (0*u1_attacked_2))
s.add(r2_2 == y2_2 - (0*z1_2) - (1*z2_2) - (0*u1_attacked_2))
s.add(rabs1_2 == If(r1_2<0,(-1)*r1_2,r1_2))
s.add(rabs2_2 == If(r2_2<0,(-1)*r2_2,r2_2))
s.add(r_2 ==rabs1_2 +rabs2_2 )
s.add(r_2<0.03)
s.add(z1_3 ==  (0.66*z1_2) + (0.53*z2_2) + (0.34*u1_2) + (0.36*r1[2]) + (0.27*r2[2]) )
s.add(z2_3 ==  (-0.53*z1_2) + (0.13*z2_2) + (0.53*u1_2) + (-0.31*r1[2]) + (0.08*r2[2]) )
s.add(x1_3 ==  (0.66*x1_2) + (0.53*x2_2) + (0.34*u1_attacked_2) )
s.add(x2_3 ==  (-0.53*x1_2) + (0.13*x2_2) + (0.53*u1_attacked_2) )
s.add(u1_3 ==  - (0.0556*xhat1_3) - (0.3306*xhat2_3))
s.add(u1_attacked_3 == u1_3)
s.add(y1_3 ==  + (1*x1_3) + (0*x2_3) + (0*u1_3))
s.add(y2_3 ==  + (0*x1_3) + (1*x2_3) + (0*u1_3))
s.add(r1_3 == y1_3 - (1*z1_3) - (0*z2_3) - (0*u1_attacked_3))
s.add(r2_3 == y2_3 - (0*z1_3) - (1*z2_3) - (0*u1_attacked_3))
s.add(rabs1_3 == If(r1_3<0,(-1)*r1_3,r1_3))
s.add(rabs2_3 == If(r2_3<0,(-1)*r2_3,r2_3))
s.add(r_3 ==rabs1_3 +rabs2_3 )
s.add(r_3<0.03)
s.add(z1_4 ==  (0.66*z1_3) + (0.53*z2_3) + (0.34*u1_3) + (0.36*r1[3]) + (0.27*r2[3]) )
s.add(z2_4 ==  (-0.53*z1_3) + (0.13*z2_3) + (0.53*u1_3) + (-0.31*r1[3]) + (0.08*r2[3]) )
s.add(x1_4 ==  (0.66*x1_3) + (0.53*x2_3) + (0.34*u1_attacked_3) )
s.add(x2_4 ==  (-0.53*x1_3) + (0.13*x2_3) + (0.53*u1_attacked_3) )
s.add(u1_4 ==  - (0.0556*xhat1_4) - (0.3306*xhat2_4))
s.add(u1_attacked_4 == u1_4)
s.add(y1_4 ==  + (1*x1_4) + (0*x2_4) + (0*u1_4))
s.add(y2_4 ==  + (0*x1_4) + (1*x2_4) + (0*u1_4))
s.add(r1_4 == y1_4 - (1*z1_4) - (0*z2_4) - (0*u1_attacked_4))
s.add(r2_4 == y2_4 - (0*z1_4) - (1*z2_4) - (0*u1_attacked_4))
s.add(rabs1_4 == If(r1_4<0,(-1)*r1_4,r1_4))
s.add(rabs2_4 == If(r2_4<0,(-1)*r2_4,r2_4))
s.add(r_4 ==rabs1_4 +rabs2_4 )
s.add(r_4<0.03)
s.add(z1_5 ==  (0.66*z1_4) + (0.53*z2_4) + (0.34*u1_4) + (0.36*r1[4]) + (0.27*r2[4]) )
s.add(z2_5 ==  (-0.53*z1_4) + (0.13*z2_4) + (0.53*u1_4) + (-0.31*r1[4]) + (0.08*r2[4]) )
s.add(x1_5 ==  (0.66*x1_4) + (0.53*x2_4) + (0.34*u1_attacked_4) )
s.add(x2_5 ==  (-0.53*x1_4) + (0.13*x2_4) + (0.53*u1_attacked_4) )
s.add(u1_5 ==  - (0.0556*xhat1_5) - (0.3306*xhat2_5))
s.add(u1_attacked_5 == u1_5)
s.add(y1_5 ==  + (1*x1_5) + (0*x2_5) + (0*u1_5))
s.add(y2_5 ==  + (0*x1_5) + (1*x2_5) + (0*u1_5))
s.add(r1_5 == y1_5 - (1*z1_5) - (0*z2_5) - (0*u1_attacked_5))
s.add(r2_5 == y2_5 - (0*z1_5) - (1*z2_5) - (0*u1_attacked_5))
s.add(rabs1_5 == If(r1_5<0,(-1)*r1_5,r1_5))
s.add(rabs2_5 == If(r2_5<0,(-1)*r2_5,r2_5))
s.add(r_5 ==rabs1_5 +rabs2_5 )
s.add(r_5<0.03)
s.add(z1_6 ==  (0.66*z1_5) + (0.53*z2_5) + (0.34*u1_5) + (0.36*r1[5]) + (0.27*r2[5]) )
s.add(z2_6 ==  (-0.53*z1_5) + (0.13*z2_5) + (0.53*u1_5) + (-0.31*r1[5]) + (0.08*r2[5]) )
s.add(x1_6 ==  (0.66*x1_5) + (0.53*x2_5) + (0.34*u1_attacked_5) )
s.add(x2_6 ==  (-0.53*x1_5) + (0.13*x2_5) + (0.53*u1_attacked_5) )
s.add(Or(x1_abs_0>0.1,x1_abs_1>0.1,x1_abs_2>0.1,x1_abs_3>0.1,x1_abs_4>0.1,x1_abs_5>0.1,x2_abs_0>0.05,x2_abs_1>0.05,x2_abs_2>0.05,x2_abs_3>0.05,x2_abs_4>0.05,x2_abs_5>0.05))

if s.check() != sat:
	print(s.check())
	isSat = 0
else:
	print( "sat")
	print(s.check())
	isSat = 1
	m = s.model()
	for d in m.decls():
		print ("%s = %s" % (d.name(), m[d]))
if isSat==1:
	f0 = open("powersystemresult_new.txt", "w+")
	f0.write("1")
	f0.close()
