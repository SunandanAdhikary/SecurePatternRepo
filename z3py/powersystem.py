from z3 import *
import numpy as np

s = Solver()
set_option(rational_to_decimal=True)
# set_option(precision=4)
attack1 = np.zeros(16, dtype=float)
attack2 = np.zeros(16, dtype=float)
theta = np.zeros(16, dtype=float)
omega = np.zeros(16, dtype=float)
y1 = np.zeros(16, dtype=float)
y2 = np.zeros(16, dtype=float)
yhat1 = np.zeros(16, dtype=float)
yhat2 = np.zeros(16, dtype=float)
x1 = np.zeros(16, dtype=float)
x2 = np.zeros(16, dtype=float)
xhat1 = np.zeros(16, dtype=float)
xhat2 = np.zeros(16, dtype=float)
u = np.zeros(16, dtype=float)
r = np.zeros(16, dtype=float)
a11 = Real('a11')
a12 = Real('a12')
a21 = Real('a21')
a22 = Real('a22')
b1 = Real('b1')
b2 = Real('b2')
c11 = Real('c11')
c12 = Real('c12')
c21 = Real('c21')
c22 = Real('c22')
k1 = Real('k1')
k2 = Real('k2')
l11 = Real('l11')
l12 = Real('l12')
l21 = Real('l21')
l22 = Real('l22')
s.add(a11 == 0.66)
s.add(a12 == 0.53)
s.add(a21 == -0.53)
s.add(a22 == 0.13)
s.add(b1 == 0.34)
s.add(b2 == 0.53)
s.add(c11 == 1)
s.add(c12 == 0)
s.add(c21 == 0)
s.add(c22 == 1)
s.add(k1 == 0.0556)
s.add(k2 == 0.3306)
s.add(l11 == 0.3600)
s.add(l12 == 0.2700)
s.add(l21 == -0.3100)
s.add(l22 == 0.0800)
y1_0 = Real('y1_0')
yhat1_0 = Real('yhat1_0')
y2_0 = Real('y2_0')
yhat2_0 = Real('yhat2_0')
x1_0 = Real('x1_0')
xhat1_0 = Real('xhat1_0')
x2_0 = Real('x2_0')
xhat2_0 = Real('xhat2_0')
r1_0 = Real('r1_0')
r2_0 = Real('r2_0')
p_0 = Real('p_0')
q_0 = Real('q_0')
r_0 = Real('r_0')
theta_0 = Real('yr_0')
omega_0 = Real('yg_0')
u_0 = Real('u_0')
u_attacked_0 = Real('u_0')
y1_1 = Real('y1_1')
yhat1_1 = Real('yhat1_1')
y2_1 = Real('y2_1')
yhat2_1 = Real('yhat2_1')
x1_1 = Real('x1_1')
xhat1_1 = Real('xhat1_1')
x2_1 = Real('x2_1')
xhat2_1 = Real('xhat2_1')
r1_1 = Real('r1_1')
r2_1 = Real('r2_1')
p_1 = Real('p_1')
q_1 = Real('q_1')
r_1 = Real('r_1')
theta_1 = Real('yr_1')
omega_1 = Real('yg_1')
u_1 = Real('u_1')
u_attacked_1 = Real('u_1')
y1_2 = Real('y1_2')
yhat1_2 = Real('yhat1_2')
y2_2 = Real('y2_2')
yhat2_2 = Real('yhat2_2')
x1_2 = Real('x1_2')
xhat1_2 = Real('xhat1_2')
x2_2 = Real('x2_2')
xhat2_2 = Real('xhat2_2')
r1_2 = Real('r1_2')
r2_2 = Real('r2_2')
p_2 = Real('p_2')
q_2 = Real('q_2')
r_2 = Real('r_2')
theta_2 = Real('yr_2')
omega_2 = Real('yg_2')
u_2 = Real('u_2')
u_attacked_2 = Real('u_2')
y1_3 = Real('y1_3')
yhat1_3 = Real('yhat1_3')
y2_3 = Real('y2_3')
yhat2_3 = Real('yhat2_3')
x1_3 = Real('x1_3')
xhat1_3 = Real('xhat1_3')
x2_3 = Real('x2_3')
xhat2_3 = Real('xhat2_3')
r1_3 = Real('r1_3')
r2_3 = Real('r2_3')
p_3 = Real('p_3')
q_3 = Real('q_3')
r_3 = Real('r_3')
theta_3 = Real('yr_3')
omega_3 = Real('yg_3')
u_3 = Real('u_3')
u_attacked_3 = Real('u_3')
y1_4 = Real('y1_4')
yhat1_4 = Real('yhat1_4')
y2_4 = Real('y2_4')
yhat2_4 = Real('yhat2_4')
x1_4 = Real('x1_4')
xhat1_4 = Real('xhat1_4')
x2_4 = Real('x2_4')
xhat2_4 = Real('xhat2_4')
r1_4 = Real('r1_4')
r2_4 = Real('r2_4')
p_4 = Real('p_4')
q_4 = Real('q_4')
r_4 = Real('r_4')
theta_4 = Real('yr_4')
omega_4 = Real('yg_4')
u_4 = Real('u_4')
u_attacked_4 = Real('u_4')
y1_5 = Real('y1_5')
yhat1_5 = Real('yhat1_5')
y2_5 = Real('y2_5')
yhat2_5 = Real('yhat2_5')
x1_5 = Real('x1_5')
xhat1_5 = Real('xhat1_5')
x2_5 = Real('x2_5')
xhat2_5 = Real('xhat2_5')
r1_5 = Real('r1_5')
r2_5 = Real('r2_5')
p_5 = Real('p_5')
q_5 = Real('q_5')
r_5 = Real('r_5')
theta_5 = Real('yr_5')
omega_5 = Real('yg_5')
u_5 = Real('u_5')
u_attacked_5 = Real('u_5')
y1_6 = Real('y1_6')
yhat1_6 = Real('yhat1_6')
y2_6 = Real('y2_6')
yhat2_6 = Real('yhat2_6')
x1_6 = Real('x1_6')
xhat1_6 = Real('xhat1_6')
x2_6 = Real('x2_6')
xhat2_6 = Real('xhat2_6')
r1_6 = Real('r1_6')
r2_6 = Real('r2_6')
p_6 = Real('p_6')
q_6 = Real('q_6')
r_6 = Real('r_6')
theta_6 = Real('yr_6')
omega_6 = Real('yg_6')
u_6 = Real('u_6')
u_attacked_6 = Real('u_6')
y1_7 = Real('y1_7')
yhat1_7 = Real('yhat1_7')
y2_7 = Real('y2_7')
yhat2_7 = Real('yhat2_7')
x1_7 = Real('x1_7')
xhat1_7 = Real('xhat1_7')
x2_7 = Real('x2_7')
xhat2_7 = Real('xhat2_7')
r1_7 = Real('r1_7')
r2_7 = Real('r2_7')
p_7 = Real('p_7')
q_7 = Real('q_7')
r_7 = Real('r_7')
theta_7 = Real('yr_7')
omega_7 = Real('yg_7')
u_7 = Real('u_7')
u_attacked_7 = Real('u_7')
y1_8 = Real('y1_8')
yhat1_8 = Real('yhat1_8')
y2_8 = Real('y2_8')
yhat2_8 = Real('yhat2_8')
x1_8 = Real('x1_8')
xhat1_8 = Real('xhat1_8')
x2_8 = Real('x2_8')
xhat2_8 = Real('xhat2_8')
r1_8 = Real('r1_8')
r2_8 = Real('r2_8')
p_8 = Real('p_8')
q_8 = Real('q_8')
r_8 = Real('r_8')
theta_8 = Real('yr_8')
omega_8 = Real('yg_8')
u_8 = Real('u_8')
u_attacked_8 = Real('u_8')
y1_9 = Real('y1_9')
yhat1_9 = Real('yhat1_9')
y2_9 = Real('y2_9')
yhat2_9 = Real('yhat2_9')
x1_9 = Real('x1_9')
xhat1_9 = Real('xhat1_9')
x2_9 = Real('x2_9')
xhat2_9 = Real('xhat2_9')
r1_9 = Real('r1_9')
r2_9 = Real('r2_9')
p_9 = Real('p_9')
q_9 = Real('q_9')
r_9 = Real('r_9')
theta_9 = Real('yr_9')
omega_9 = Real('yg_9')
u_9 = Real('u_9')
u_attacked_9 = Real('u_9')
y1_10 = Real('y1_10')
yhat1_10 = Real('yhat1_10')
y2_10 = Real('y2_10')
yhat2_10 = Real('yhat2_10')
x1_10 = Real('x1_10')
xhat1_10 = Real('xhat1_10')
x2_10 = Real('x2_10')
xhat2_10 = Real('xhat2_10')
r1_10 = Real('r1_10')
r2_10 = Real('r2_10')
p_10 = Real('p_10')
q_10 = Real('q_10')
r_10 = Real('r_10')
theta_10 = Real('yr_10')
omega_10 = Real('yg_10')
u_10 = Real('u_10')
u_attacked_10 = Real('u_10')
y1_11 = Real('y1_11')
yhat1_11 = Real('yhat1_11')
y2_11 = Real('y2_11')
yhat2_11 = Real('yhat2_11')
x1_11 = Real('x1_11')
xhat1_11 = Real('xhat1_11')
x2_11 = Real('x2_11')
xhat2_11 = Real('xhat2_11')
r1_11 = Real('r1_11')
r2_11 = Real('r2_11')
p_11 = Real('p_11')
q_11 = Real('q_11')
r_11 = Real('r_11')
theta_11 = Real('yr_11')
omega_11 = Real('yg_11')
u_11 = Real('u_11')
u_attacked_11 = Real('u_11')
y1_12 = Real('y1_12')
yhat1_12 = Real('yhat1_12')
y2_12 = Real('y2_12')
yhat2_12 = Real('yhat2_12')
x1_12 = Real('x1_12')
xhat1_12 = Real('xhat1_12')
x2_12 = Real('x2_12')
xhat2_12 = Real('xhat2_12')
r1_12 = Real('r1_12')
r2_12 = Real('r2_12')
p_12 = Real('p_12')
q_12 = Real('q_12')
r_12 = Real('r_12')
theta_12 = Real('yr_12')
omega_12 = Real('yg_12')
u_12 = Real('u_12')
u_attacked_12 = Real('u_12')
y1_13 = Real('y1_13')
yhat1_13 = Real('yhat1_13')
y2_13 = Real('y2_13')
yhat2_13 = Real('yhat2_13')
x1_13 = Real('x1_13')
xhat1_13 = Real('xhat1_13')
x2_13 = Real('x2_13')
xhat2_13 = Real('xhat2_13')
r1_13 = Real('r1_13')
r2_13 = Real('r2_13')
p_13 = Real('p_13')
q_13 = Real('q_13')
r_13 = Real('r_13')
theta_13 = Real('yr_13')
omega_13 = Real('yg_13')
u_13 = Real('u_13')
u_attacked_13 = Real('u_13')
y1_14 = Real('y1_14')
yhat1_14 = Real('yhat1_14')
y2_14 = Real('y2_14')
yhat2_14 = Real('yhat2_14')
x1_14 = Real('x1_14')
xhat1_14 = Real('xhat1_14')
x2_14 = Real('x2_14')
xhat2_14 = Real('xhat2_14')
r1_14 = Real('r1_14')
r2_14 = Real('r2_14')
p_14 = Real('p_14')
q_14 = Real('q_14')
r_14 = Real('r_14')
theta_14 = Real('yr_14')
omega_14 = Real('yg_14')
u_14 = Real('u_14')
u_attacked_14 = Real('u_14')
y1_15 = Real('y1_15')
yhat1_15 = Real('yhat1_15')
y2_15 = Real('y2_15')
yhat2_15 = Real('yhat2_15')
x1_15 = Real('x1_15')
xhat1_15 = Real('xhat1_15')
x2_15 = Real('x2_15')
xhat2_15 = Real('xhat2_15')
r1_15 = Real('r1_15')
r2_15 = Real('r2_15')
p_15 = Real('p_15')
q_15 = Real('q_15')
r_15 = Real('r_15')
theta_15 = Real('yr_15')
omega_15 = Real('yg_15')
u_15 = Real('u_15')
u_attacked_15 = Real('u_15')

s.add(x1_0 == 0)
s.add(x2_0 == 0)
s.add(xhat1_0 == 0)
s.add(xhat2_0 == 0)
s.add(u_0 == 0)
s.add(theta_0 == x2_0)
s.add(omega_0 == x2_0)

s.add(u_0 == ((-1)*k1*xhat1_0) + ((-1)*k2*xhat2_0) )
attack1_0 = Real('attack1_0')

s.add(u_attacked_0 == (u_0 + attack1_0))
attack2_0 = Real('attack2_0')

s.add(y1_0 == (c11*x1_0) + (c12*x2_0) + attack2_0)
s.add(y2_0 == (c21*x1_0) + (c22*x2_0))
s.add(yhat1_0 == (c11*xhat1_0) + (c12*xhat2_0))
s.add(yhat2_0 == (c21*xhat1_0) + (c22*xhat2_0))
s.add(r1_0 == y1_0 - yhat1_0)
s.add(r2_0 == y2_0 - yhat2_0)
s.add(p_0 == If(r1_0<0,(-1)*r1_0,r1_0))
s.add(q_0 == If(r2_0<0,(-1)*r2_0,r2_0))
s.add(r_0 == If(p_0>q_0,p_0,q_0))
s.add(x1_1 == (a11*x1_0) + (a12*x2_0) + (b1*u_attacked_0))
s.add(x2_1 == (a21*x1_0) + (a22*x2_0) + (b2*u_attacked_0))
s.add(xhat2_1 == (a21*xhat1_0) + (a22*xhat2_0) + (b2*u_0) + (l21*r1_0) + (l22*r2_0))
s.add(xhat1_1 == (a11*xhat1_0) + (a12*xhat2_0) + (b1*u_0) + (l11*r1_0) + (l12*r2_0))
s.add(theta_1 == If(x1_1<0,(-1)*x1_1,x1_1))
s.add(omega_1 == If(x2_1<0,(-1)*x2_1,x2_1))
s.add(u_1 == ((-1)*k1*xhat1_1) + ((-1)*k2*xhat2_1) )
attack1_1 = Real('attack1_1')

s.add(u_attacked_1 == (u_1 + attack1_1))
attack2_1 = Real('attack2_1')

s.add(y1_1 == (c11*x1_1) + (c12*x2_1) + attack2_1)
s.add(y2_1 == (c21*x1_1) + (c22*x2_1))
s.add(yhat1_1 == (c11*xhat1_1) + (c12*xhat2_1))
s.add(yhat2_1 == (c21*xhat1_1) + (c22*xhat2_1))
s.add(r1_1 == y1_1 - yhat1_1)
s.add(r2_1 == y2_1 - yhat2_1)
s.add(p_1 == If(r1_1<0,(-1)*r1_1,r1_1))
s.add(q_1 == If(r2_1<0,(-1)*r2_1,r2_1))
s.add(r_1 == If(p_1>q_1,p_1,q_1))
s.add(x1_2 == (a11*x1_1) + (a12*x2_1) + (b1*u_attacked_1))
s.add(x2_2 == (a21*x1_1) + (a22*x2_1) + (b2*u_attacked_1))
s.add(xhat2_2 == (a21*xhat1_1) + (a22*xhat2_1) + (b2*u_1) + (l21*r1_1) + (l22*r2_1))
s.add(xhat1_2 == (a11*xhat1_1) + (a12*xhat2_1) + (b1*u_1) + (l11*r1_1) + (l12*r2_1))
s.add(theta_2 == If(x1_2<0,(-1)*x1_2,x1_2))
s.add(omega_2 == If(x2_2<0,(-1)*x2_2,x2_2))
s.add(u_2 == ((-1)*k1*xhat1_2) + ((-1)*k2*xhat2_2) )
attack1_2 = Real('attack1_2')

s.add(u_attacked_2 == (u_2 + attack1_2))
attack2_2 = Real('attack2_2')

s.add(y1_2 == (c11*x1_2) + (c12*x2_2) + attack2_2)
s.add(y2_2 == (c21*x1_2) + (c22*x2_2))
s.add(yhat1_2 == (c11*xhat1_2) + (c12*xhat2_2))
s.add(yhat2_2 == (c21*xhat1_2) + (c22*xhat2_2))
s.add(r1_2 == y1_2 - yhat1_2)
s.add(r2_2 == y2_2 - yhat2_2)
s.add(p_2 == If(r1_2<0,(-1)*r1_2,r1_2))
s.add(q_2 == If(r2_2<0,(-1)*r2_2,r2_2))
s.add(r_2 == If(p_2>q_2,p_2,q_2))
s.add(x1_3 == (a11*x1_2) + (a12*x2_2) + (b1*u_attacked_2))
s.add(x2_3 == (a21*x1_2) + (a22*x2_2) + (b2*u_attacked_2))
s.add(xhat2_3 == (a21*xhat1_2) + (a22*xhat2_2) + (b2*u_2) + (l21*r1_2) + (l22*r2_2))
s.add(xhat1_3 == (a11*xhat1_2) + (a12*xhat2_2) + (b1*u_2) + (l11*r1_2) + (l12*r2_2))
s.add(theta_3 == If(x1_3<0,(-1)*x1_3,x1_3))
s.add(omega_3 == If(x2_3<0,(-1)*x2_3,x2_3))
s.add(u_3 == ((-1)*k1*xhat1_3) + ((-1)*k2*xhat2_3) )
attack1_3 = Real('attack1_3')

s.add(u_attacked_3 == (u_3 + attack1_3))
attack2_3 = Real('attack2_3')

s.add(y1_3 == (c11*x1_3) + (c12*x2_3) + attack2_3)
s.add(y2_3 == (c21*x1_3) + (c22*x2_3))
s.add(yhat1_3 == (c11*xhat1_3) + (c12*xhat2_3))
s.add(yhat2_3 == (c21*xhat1_3) + (c22*xhat2_3))
s.add(r1_3 == y1_3 - yhat1_3)
s.add(r2_3 == y2_3 - yhat2_3)
s.add(p_3 == If(r1_3<0,(-1)*r1_3,r1_3))
s.add(q_3 == If(r2_3<0,(-1)*r2_3,r2_3))
s.add(r_3 == If(p_3>q_3,p_3,q_3))
s.add(x1_4 == (a11*x1_3) + (a12*x2_3) + (b1*u_attacked_3))
s.add(x2_4 == (a21*x1_3) + (a22*x2_3) + (b2*u_attacked_3))
s.add(xhat2_4 == (a21*xhat1_3) + (a22*xhat2_3) + (b2*u_3) + (l21*r1_3) + (l22*r2_3))
s.add(xhat1_4 == (a11*xhat1_3) + (a12*xhat2_3) + (b1*u_3) + (l11*r1_3) + (l12*r2_3))
s.add(theta_4 == If(x1_4<0,(-1)*x1_4,x1_4))
s.add(omega_4 == If(x2_4<0,(-1)*x2_4,x2_4))
s.add(u_4 == ((-1)*k1*xhat1_4) + ((-1)*k2*xhat2_4) )
attack1_4 = Real('attack1_4')

s.add(u_attacked_4 == (u_4 + attack1_4))
attack2_4 = Real('attack2_4')

s.add(y1_4 == (c11*x1_4) + (c12*x2_4) + attack2_4)
s.add(y2_4 == (c21*x1_4) + (c22*x2_4))
s.add(yhat1_4 == (c11*xhat1_4) + (c12*xhat2_4))
s.add(yhat2_4 == (c21*xhat1_4) + (c22*xhat2_4))
s.add(r1_4 == y1_4 - yhat1_4)
s.add(r2_4 == y2_4 - yhat2_4)
s.add(p_4 == If(r1_4<0,(-1)*r1_4,r1_4))
s.add(q_4 == If(r2_4<0,(-1)*r2_4,r2_4))
s.add(r_4 == If(p_4>q_4,p_4,q_4))
s.add(x1_5 == (a11*x1_4) + (a12*x2_4) + (b1*u_attacked_4))
s.add(x2_5 == (a21*x1_4) + (a22*x2_4) + (b2*u_attacked_4))
s.add(xhat2_5 == (a21*xhat1_4) + (a22*xhat2_4) + (b2*u_4) + (l21*r1_4) + (l22*r2_4))
s.add(xhat1_5 == (a11*xhat1_4) + (a12*xhat2_4) + (b1*u_4) + (l11*r1_4) + (l12*r2_4))
s.add(theta_5 == If(x1_5<0,(-1)*x1_5,x1_5))
s.add(omega_5 == If(x2_5<0,(-1)*x2_5,x2_5))
s.add(u_5 == ((-1)*k1*xhat1_5) + ((-1)*k2*xhat2_5) )
attack1_5 = Real('attack1_5')

s.add(u_attacked_5 == (u_5 + attack1_5))
attack2_5 = Real('attack2_5')

s.add(y1_5 == (c11*x1_5) + (c12*x2_5) + attack2_5)
s.add(y2_5 == (c21*x1_5) + (c22*x2_5))
s.add(yhat1_5 == (c11*xhat1_5) + (c12*xhat2_5))
s.add(yhat2_5 == (c21*xhat1_5) + (c22*xhat2_5))
s.add(r1_5 == y1_5 - yhat1_5)
s.add(r2_5 == y2_5 - yhat2_5)
s.add(p_5 == If(r1_5<0,(-1)*r1_5,r1_5))
s.add(q_5 == If(r2_5<0,(-1)*r2_5,r2_5))
s.add(r_5 == If(p_5>q_5,p_5,q_5))
s.add(x1_6 == (a11*x1_5) + (a12*x2_5) + (b1*u_attacked_5))
s.add(x2_6 == (a21*x1_5) + (a22*x2_5) + (b2*u_attacked_5))
s.add(xhat2_6 == (a21*xhat1_5) + (a22*xhat2_5) + (b2*u_5) + (l21*r1_5) + (l22*r2_5))
s.add(xhat1_6 == (a11*xhat1_5) + (a12*xhat2_5) + (b1*u_5) + (l11*r1_5) + (l12*r2_5))
s.add(theta_6 == If(x1_6<0,(-1)*x1_6,x1_6))
s.add(omega_6 == If(x2_6<0,(-1)*x2_6,x2_6))
s.add(u_6 == ((-1)*k1*xhat1_6) + ((-1)*k2*xhat2_6) )

s.add(u_attacked_6 == u_6)

s.add(y1_6 == (c11*x1_6) + (c12*x2_6))
s.add(y2_6 == (c21*x1_6) + (c22*x2_6))
s.add(yhat1_6 == (c11*xhat1_6) + (c12*xhat2_6))
s.add(yhat2_6 == (c21*xhat1_6) + (c22*xhat2_6))
s.add(r1_6 == y1_6 - yhat1_6)
s.add(r2_6 == y2_6 - yhat2_6)
s.add(p_6 == If(r1_6<0,(-1)*r1_6,r1_6))
s.add(q_6 == If(r2_6<0,(-1)*r2_6,r2_6))
s.add(r_6 == If(p_6>q_6,p_6,q_6))
s.add(x1_7 == (a11*x1_6) + (a12*x2_6) + (b1*u_attacked_6))
s.add(x2_7 == (a21*x1_6) + (a22*x2_6) + (b2*u_attacked_6))
s.add(xhat2_7 == (a21*xhat1_6) + (a22*xhat2_6) + (b2*u_6) + (l21*r1_6) + (l22*r2_6))
s.add(xhat1_7 == (a11*xhat1_6) + (a12*xhat2_6) + (b1*u_6) + (l11*r1_6) + (l12*r2_6))
s.add(theta_7 == If(x1_7<0,(-1)*x1_7,x1_7))
s.add(omega_7 == If(x2_7<0,(-1)*x2_7,x2_7))
s.add(u_7 == ((-1)*k1*xhat1_7) + ((-1)*k2*xhat2_7) )

s.add(u_attacked_7 == u_7)

s.add(y1_7 == (c11*x1_7) + (c12*x2_7))
s.add(y2_7 == (c21*x1_7) + (c22*x2_7))
s.add(yhat1_7 == (c11*xhat1_7) + (c12*xhat2_7))
s.add(yhat2_7 == (c21*xhat1_7) + (c22*xhat2_7))
s.add(r1_7 == y1_7 - yhat1_7)
s.add(r2_7 == y2_7 - yhat2_7)
s.add(p_7 == If(r1_7<0,(-1)*r1_7,r1_7))
s.add(q_7 == If(r2_7<0,(-1)*r2_7,r2_7))
s.add(r_7 == If(p_7>q_7,p_7,q_7))
s.add(x1_8 == (a11*x1_7) + (a12*x2_7) + (b1*u_attacked_7))
s.add(x2_8 == (a21*x1_7) + (a22*x2_7) + (b2*u_attacked_7))
s.add(xhat2_8 == (a21*xhat1_7) + (a22*xhat2_7) + (b2*u_7) + (l21*r1_7) + (l22*r2_7))
s.add(xhat1_8 == (a11*xhat1_7) + (a12*xhat2_7) + (b1*u_7) + (l11*r1_7) + (l12*r2_7))
s.add(theta_8 == If(x1_8<0,(-1)*x1_8,x1_8))
s.add(omega_8 == If(x2_8<0,(-1)*x2_8,x2_8))
s.add(u_8 == ((-1)*k1*xhat1_8) + ((-1)*k2*xhat2_8) )

s.add(u_attacked_8 == u_8)

s.add(y1_8 == (c11*x1_8) + (c12*x2_8))
s.add(y2_8 == (c21*x1_8) + (c22*x2_8))
s.add(yhat1_8 == (c11*xhat1_8) + (c12*xhat2_8))
s.add(yhat2_8 == (c21*xhat1_8) + (c22*xhat2_8))
s.add(r1_8 == y1_8 - yhat1_8)
s.add(r2_8 == y2_8 - yhat2_8)
s.add(p_8 == If(r1_8<0,(-1)*r1_8,r1_8))
s.add(q_8 == If(r2_8<0,(-1)*r2_8,r2_8))
s.add(r_8 == If(p_8>q_8,p_8,q_8))
s.add(x1_9 == (a11*x1_8) + (a12*x2_8) + (b1*u_attacked_8))
s.add(x2_9 == (a21*x1_8) + (a22*x2_8) + (b2*u_attacked_8))
s.add(xhat2_9 == (a21*xhat1_8) + (a22*xhat2_8) + (b2*u_8) + (l21*r1_8) + (l22*r2_8))
s.add(xhat1_9 == (a11*xhat1_8) + (a12*xhat2_8) + (b1*u_8) + (l11*r1_8) + (l12*r2_8))
s.add(theta_9 == If(x1_9<0,(-1)*x1_9,x1_9))
s.add(omega_9 == If(x2_9<0,(-1)*x2_9,x2_9))
s.add(u_9 == ((-1)*k1*xhat1_9) + ((-1)*k2*xhat2_9) )

s.add(u_attacked_9 == u_9)

s.add(y1_9 == (c11*x1_9) + (c12*x2_9))
s.add(y2_9 == (c21*x1_9) + (c22*x2_9))
s.add(yhat1_9 == (c11*xhat1_9) + (c12*xhat2_9))
s.add(yhat2_9 == (c21*xhat1_9) + (c22*xhat2_9))
s.add(r1_9 == y1_9 - yhat1_9)
s.add(r2_9 == y2_9 - yhat2_9)
s.add(p_9 == If(r1_9<0,(-1)*r1_9,r1_9))
s.add(q_9 == If(r2_9<0,(-1)*r2_9,r2_9))
s.add(r_9 == If(p_9>q_9,p_9,q_9))
s.add(x1_10 == (a11*x1_9) + (a12*x2_9) + (b1*u_attacked_9))
s.add(x2_10 == (a21*x1_9) + (a22*x2_9) + (b2*u_attacked_9))
s.add(xhat2_10 == (a21*xhat1_9) + (a22*xhat2_9) + (b2*u_9) + (l21*r1_9) + (l22*r2_9))
s.add(xhat1_10 == (a11*xhat1_9) + (a12*xhat2_9) + (b1*u_9) + (l11*r1_9) + (l12*r2_9))
s.add(theta_10 == If(x1_10<0,(-1)*x1_10,x1_10))
s.add(omega_10 == If(x2_10<0,(-1)*x2_10,x2_10))
s.add(u_10 == ((-1)*k1*xhat1_10) + ((-1)*k2*xhat2_10) )

s.add(u_attacked_10 == u_10)

s.add(y1_10 == (c11*x1_10) + (c12*x2_10))
s.add(y2_10 == (c21*x1_10) + (c22*x2_10))
s.add(yhat1_10 == (c11*xhat1_10) + (c12*xhat2_10))
s.add(yhat2_10 == (c21*xhat1_10) + (c22*xhat2_10))
s.add(r1_10 == y1_10 - yhat1_10)
s.add(r2_10 == y2_10 - yhat2_10)
s.add(p_10 == If(r1_10<0,(-1)*r1_10,r1_10))
s.add(q_10 == If(r2_10<0,(-1)*r2_10,r2_10))
s.add(r_10 == If(p_10>q_10,p_10,q_10))
s.add(x1_11 == (a11*x1_10) + (a12*x2_10) + (b1*u_attacked_10))
s.add(x2_11 == (a21*x1_10) + (a22*x2_10) + (b2*u_attacked_10))
s.add(xhat2_11 == (a21*xhat1_10) + (a22*xhat2_10) + (b2*u_10) + (l21*r1_10) + (l22*r2_10))
s.add(xhat1_11 == (a11*xhat1_10) + (a12*xhat2_10) + (b1*u_10) + (l11*r1_10) + (l12*r2_10))
s.add(theta_11 == If(x1_11<0,(-1)*x1_11,x1_11))
s.add(omega_11 == If(x2_11<0,(-1)*x2_11,x2_11))
s.add(u_11 == ((-1)*k1*xhat1_11) + ((-1)*k2*xhat2_11) )

s.add(u_attacked_11 == u_11)

s.add(y1_11 == (c11*x1_11) + (c12*x2_11))
s.add(y2_11 == (c21*x1_11) + (c22*x2_11))
s.add(yhat1_11 == (c11*xhat1_11) + (c12*xhat2_11))
s.add(yhat2_11 == (c21*xhat1_11) + (c22*xhat2_11))
s.add(r1_11 == y1_11 - yhat1_11)
s.add(r2_11 == y2_11 - yhat2_11)
s.add(p_11 == If(r1_11<0,(-1)*r1_11,r1_11))
s.add(q_11 == If(r2_11<0,(-1)*r2_11,r2_11))
s.add(r_11 == If(p_11>q_11,p_11,q_11))
s.add(x1_12 == (a11*x1_11) + (a12*x2_11) + (b1*u_attacked_11))
s.add(x2_12 == (a21*x1_11) + (a22*x2_11) + (b2*u_attacked_11))
s.add(xhat2_12 == (a21*xhat1_11) + (a22*xhat2_11) + (b2*u_11) + (l21*r1_11) + (l22*r2_11))
s.add(xhat1_12 == (a11*xhat1_11) + (a12*xhat2_11) + (b1*u_11) + (l11*r1_11) + (l12*r2_11))
s.add(theta_12 == If(x1_12<0,(-1)*x1_12,x1_12))
s.add(omega_12 == If(x2_12<0,(-1)*x2_12,x2_12))
s.add(u_12 == ((-1)*k1*xhat1_12) + ((-1)*k2*xhat2_12) )

s.add(u_attacked_12 == u_12)

s.add(y1_12 == (c11*x1_12) + (c12*x2_12))
s.add(y2_12 == (c21*x1_12) + (c22*x2_12))
s.add(yhat1_12 == (c11*xhat1_12) + (c12*xhat2_12))
s.add(yhat2_12 == (c21*xhat1_12) + (c22*xhat2_12))
s.add(r1_12 == y1_12 - yhat1_12)
s.add(r2_12 == y2_12 - yhat2_12)
s.add(p_12 == If(r1_12<0,(-1)*r1_12,r1_12))
s.add(q_12 == If(r2_12<0,(-1)*r2_12,r2_12))
s.add(r_12 == If(p_12>q_12,p_12,q_12))
s.add(x1_13 == (a11*x1_12) + (a12*x2_12) + (b1*u_attacked_12))
s.add(x2_13 == (a21*x1_12) + (a22*x2_12) + (b2*u_attacked_12))
s.add(xhat2_13 == (a21*xhat1_12) + (a22*xhat2_12) + (b2*u_12) + (l21*r1_12) + (l22*r2_12))
s.add(xhat1_13 == (a11*xhat1_12) + (a12*xhat2_12) + (b1*u_12) + (l11*r1_12) + (l12*r2_12))
s.add(theta_13 == If(x1_13<0,(-1)*x1_13,x1_13))
s.add(omega_13 == If(x2_13<0,(-1)*x2_13,x2_13))
s.add(u_13 == ((-1)*k1*xhat1_13) + ((-1)*k2*xhat2_13) )

s.add(u_attacked_13 == u_13)

s.add(y1_13 == (c11*x1_13) + (c12*x2_13))
s.add(y2_13 == (c21*x1_13) + (c22*x2_13))
s.add(yhat1_13 == (c11*xhat1_13) + (c12*xhat2_13))
s.add(yhat2_13 == (c21*xhat1_13) + (c22*xhat2_13))
s.add(r1_13 == y1_13 - yhat1_13)
s.add(r2_13 == y2_13 - yhat2_13)
s.add(p_13 == If(r1_13<0,(-1)*r1_13,r1_13))
s.add(q_13 == If(r2_13<0,(-1)*r2_13,r2_13))
s.add(r_13 == If(p_13>q_13,p_13,q_13))
s.add(x1_14 == (a11*x1_13) + (a12*x2_13) + (b1*u_attacked_13))
s.add(x2_14 == (a21*x1_13) + (a22*x2_13) + (b2*u_attacked_13))
s.add(xhat2_14 == (a21*xhat1_13) + (a22*xhat2_13) + (b2*u_13) + (l21*r1_13) + (l22*r2_13))
s.add(xhat1_14 == (a11*xhat1_13) + (a12*xhat2_13) + (b1*u_13) + (l11*r1_13) + (l12*r2_13))
s.add(theta_14 == If(x1_14<0,(-1)*x1_14,x1_14))
s.add(omega_14 == If(x2_14<0,(-1)*x2_14,x2_14))
s.add(u_14 == ((-1)*k1*xhat1_14) + ((-1)*k2*xhat2_14) )

s.add(u_attacked_14 == u_14)

s.add(y1_14 == (c11*x1_14) + (c12*x2_14))
s.add(y2_14 == (c21*x1_14) + (c22*x2_14))
s.add(yhat1_14 == (c11*xhat1_14) + (c12*xhat2_14))
s.add(yhat2_14 == (c21*xhat1_14) + (c22*xhat2_14))
s.add(r1_14 == y1_14 - yhat1_14)
s.add(r2_14 == y2_14 - yhat2_14)
s.add(p_14 == If(r1_14<0,(-1)*r1_14,r1_14))
s.add(q_14 == If(r2_14<0,(-1)*r2_14,r2_14))
s.add(r_14 == If(p_14>q_14,p_14,q_14))
s.add(x1_15 == (a11*x1_14) + (a12*x2_14) + (b1*u_attacked_14))
s.add(x2_15 == (a21*x1_14) + (a22*x2_14) + (b2*u_attacked_14))
s.add(xhat2_15 == (a21*xhat1_14) + (a22*xhat2_14) + (b2*u_14) + (l21*r1_14) + (l22*r2_14))
s.add(xhat1_15 == (a11*xhat1_14) + (a12*xhat2_14) + (b1*u_14) + (l11*r1_14) + (l12*r2_14))
s.add(theta_15 == If(x1_15<0,(-1)*x1_15,x1_15))
s.add(omega_15 == If(x2_15<0,(-1)*x2_15,x2_15))
s.add(And((Or(r_0<0.03,r_1<0.03,r_2<0.03,r_3<0.03,r_4<0.03,r_5<0.03,r_6<0.03,r_7<0.03,r_8<0.03,r_9<0.03,r_10<0.03,r_11<0.03,r_12<0.03,r_13<0.03,r_14<0.03)),(Or(theta_0>0.1,omega_0>0.05,theta_1>0.1,omega_1>0.05,theta_2>0.1,omega_2>0.05,theta_3>0.1,omega_3>0.05,theta_4>0.1,omega_4>0.05,theta_5>0.1,omega_5>0.05,theta_6>0.1,omega_6>0.05,theta_7>0.1,omega_7>0.05,theta_8>0.1,omega_8>0.05,theta_9>0.1,omega_9>0.05,theta_10>0.1,omega_10>0.05,theta_11>0.1,omega_11>0.05,theta_12>0.1,omega_12>0.05,theta_13>0.1,omega_13>0.05,theta_14>0.1,omega_14>0.05))))

if s.check() == unsat:
	print( "unsat")
	print(s.check())
	isSat = 0        
else:
	print( "sat")
	print(s.check())
	isSat = 1
	m = s.model()
	for d in m.decls():
		if "attack1" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			attack1[i] = float(y)
		elif "attack2" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			attack2[i] = float(y)
		elif "x1_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			x1[i] = float(y)
		elif "x2_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			x2[i] = float(y)
		elif "xhat1_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			xhat1[i] = float(y)
		elif "xhat2_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			xhat2[i] = float(y)
		elif "y1_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			y1[i] = float(y)
		elif "y2_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			y2[i] = float(y)
		elif "yhat1_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			yhat1[i] = float(y)
		elif "yhat2_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			yhat2[i] = float(y)
		elif "r_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			r[i] = float(y)
		elif "theta_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			theta[i] = float(y)
		elif "omega_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			omega[i] = float(y)
		elif "u_" in d.name():
			i = int(d.name().split('_')[1])
			x = str(m[d])
			index = x.find("?")
			if index != -1:
				y = x[:-1]
			else:
				y = x
			u[i] = float(y)

	for i in range(15):
		print("attack1_{0}={1}".format(i,attack1[i]))
		print("attack2_{0}={1}".format(i,attack2[i]))
		print("x1_{0}={1}".format(i,x1[i]))
		print("x2_{0}={1}".format(i,x2[i]))
		print("xhat1_{0}={1}".format(i,xhat1[i]))
		print("xhat2_{0}={1}".format(i,xhat2[i]))
		print("u_{0}={1}".format(i,u[i]))
		print("y1_{0}={1}".format(i,y1[i]))
		print("y2_{0}={1}".format(i,y2[i]))
		print("yhat1_{0}={1}".format(i,yhat1[i]))
		print("yhat2_{0}={1}".format(i,yhat2[i]))
		print("r_{0}={1}".format(i,r[i]))
		print("theta_{0}={1}\n".format(i,theta[i]))
		print("omega_{0}={1}\n".format(i,omega[i]))
print("attack on control signal")
print(attack1)
print("attack on theta")
print(attack2)
print("u")
print(u)
if isSat==1:
	f0 = open("powersystemresult.txt", "w+")
	f0.write("1")
	f0.close()
f1 = open("actuatorAttackVector.csv", "w+")
for i in range(6):
	f1.write("{0}".format(attack1[i]))
	if i != 6-1:
		f1.write(",")
f1.close()
f2 = open("thetaAttackVector.csv", "w+")
for i in range(6):
	f2.write("{0}".format(attack2[i]))
	if i != 6-1:
		f2.write(",")
f2.close()